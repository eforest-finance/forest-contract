/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/Forest.MockProxyAccountContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/Forest.MockProxyAccountContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "Forest.MockProxyAccountContract";

// the contract definition: a gRPC service definition.
service MockProxyAccountContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "Forest.MockProxyAccountContract.MockProxyAccountContractState";


    // Action
    rpc ForwardCall(ForwardCallInput) returns (google.protobuf.Empty);
    // view
    rpc GetProxyAccountByProxyAccountAddress(aelf.Address) returns (ProxyAccount) {option (aelf.is_view) = true;}
}

//Data structure
message ForwardCallInput {
    aelf.Hash proxy_account_hash = 1;
    aelf.Address contract_address = 2;
    string method_name = 3;
    bytes args = 4;
}

message ProxyAccount {
    repeated ManagementAddress management_addresses = 1;
    int32 create_chain_id = 2;
    aelf.Hash proxy_account_hash = 3;
}

message ManagementAddress {
    aelf.Address address = 1;
}