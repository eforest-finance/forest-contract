/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.MarketNFTContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.MarketNFTContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";
import "asc12.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.MarketNFTContract";

// the contract definition: a gRPC service definition.
service MarketNFTContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "AElf.Contracts.MarketNFTContract.MarketNFTContractState";
    option(aelf.base) = "asc12.proto";

    // an action defined as a gRPC service method.
    // this action take a google.protobuf.Empty (placeholder for void) as input
    // and returns a custom defined type: HelloReturn.
    rpc Hello (google.protobuf.Empty) returns (HelloReturn) { }
    rpc Create (CreateInput) returns (google.protobuf.Empty) {
    }
}

// a custom message, used as the return type of the Hello action
message HelloReturn {
    string Value = 1;
}

message ExternalInfo {
    map<string, string> value = 1;
}

// Inputs
message CreateInput {
    // The symbol of the token.
    string symbol = 1;
    // The token amount to issue.
    int64 amount = 2;
    // The memo.
    string memo = 3;
    // The full name of the token.
    string token_name = 4;
    // The total supply of the token.
    int64 total_supply = 5;
    // The precision of the token
    int32 decimals = 6;
    // The address that created the token.
    aelf.Address issuer = 7;
    // A flag indicating if this token is burnable.
    bool is_burnable = 8;
    // A whitelist address list used to lock tokens.
    repeated aelf.Address lock_white_list = 9;
    // The chain id of the token.
    int32 issue_chain_id = 10;
    // The external information of the token.
    ExternalInfo external_info = 11;
    aelf.Address to = 12;
}

message CreateReceived {
    option (aelf.is_event) = true;
    // The symbol of the token.
    string symbol = 1;
    // The token amount to issue.
    int64 amount = 2;
    // The memo.
    string memo = 3;
    // The full name of the token.
    string token_name = 4;
    // The total supply of the token.
    int64 total_supply = 5;
    // The precision of the token
    int32 decimals = 6;
    // The address that created the token.
    aelf.Address issuer = 7;
    // A flag indicating if this token is burnable.
    bool is_burnable = 8;
    // A whitelist address list used to lock tokens.
//    repeated aelf.Address lock_white_list = 9;
    // The chain id of the token.
    int32 issue_chain_id = 10;
    // The external information of the token.
    ExternalInfo external_info = 11;
    aelf.Address to = 12;
}